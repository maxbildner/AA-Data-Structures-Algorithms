{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 Menlo-Regular;
\f3\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red251\green0\blue7;\red0\green0\blue0;\red255\green255\blue255;
\red202\green202\blue202;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c100000\c12195\c0;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;
\cssrgb\c83137\c83137\c83137;\cssrgb\c0\c0\c93333;}
\margl1440\margr1440\vieww15320\viewh22280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 6/15/20\
AA Data Structures/Algorithms Notes\
5- Naive Sorting Algorithms \
\

\f1\b 1. \cf2 Bubble Sort
\f0\b0 \cf0 \
	- Very inefficient side by side comparison sort\
	- Time Complexity: O(N^2), N = array length\
	- Space Complexity: O(1), assuming in place sort\
	- when to use: don\'92t\
\
\

\f1\b 2. \cf2 Selection Sort
\f0\b0 \cf0 \
	- Sorts left to right, but searches the right unsorted half to select which element should go next\
	- Time Complexity: O(N^2), N = array length			(n * n/2)  ->  n^2\
	- Space Complexity: O(1), assuming in place sort\
	- When to use: \
		- better than bubble sort in terms of number of possible swaps (this has least)\
		 bubble sort, swaps on every single comparison, however selection sort only swaps once (per outer loop)\
		- \'93\cf3 \cb4 \expnd0\expndtw0\kerning0
Selection Sort becomes \ul advantageous when making a swap is the most expensive operation in your system\ulnone . You will likely rarely encounter this scenario, but in a situation where you've built (or have inherited) a system with suboptimal write speed ability, for instance, maybe you're sorting data in a specialized database tuned strictly for fast read speeds at the expense of slow write speeds, using Selection Sort would save you a ton of expensive operations that could potential crash your system under peak load.\'94 (AA Reading)
\f2\fs24 \cf5 \cb1 \
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://open.appacademy.io/learn/self-study/data-structures-and-algorithms/selection-sort-notes"}}{\fldrslt 
\f3 \cf6 \ul \ulc6 https://open.appacademy.io/learn/self-study/data-structures-and-algorithms/selection-sort-notes}}
\f3 \cf6 \ul \ulc6 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \ulnone 3. \cf2 Insertion Sort
\f0\b0 \cf0 \
	- Does not search for the correct element to place, but rather sorts from left to right by inserting them \
	in the correct place\
	- Time Complexity: O(N^2), N = array length			\
	- Space Complexity: O(1), if in place sort\
	- When to use\
		- Known as the \'93Online Algorithm\'94, because its great when streaming data\
		- can sort data live as it is received\
		Ex. If you\'92re sorting the most relevant posts in a social media feed so the most relevant posts\
		stay on top, insertion sort could be great. \
		- good for sorting arrays nearly sorted \
\
\
\
\
\
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}