{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red251\green0\blue7;\red25\green60\blue255;\red88\green138\blue67;
\red255\green255\blue255;\red202\green202\blue202;\red71\green137\blue205;\red212\green213\blue154;\red141\green212\blue254;
\red67\green192\blue160;\red167\green197\blue151;\red183\green111\blue179;\red202\green202\blue202;\red251\green0\blue7;
}
{\*\expandedcolortbl;;\cssrgb\c100000\c12195\c0;\cssrgb\c12594\c35385\c100000;\cssrgb\c41525\c59950\c33208;
\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c83229\c83229\c83125;\cssrgb\c33936\c61427\c84130;\cssrgb\c86261\c86245\c66529;\cssrgb\c61361\c86489\c99746;
\cssrgb\c30610\c78876\c69022;\cssrgb\c71008\c80807\c65805;\cssrgb\c77331\c52624\c75301;\cssrgb\c83137\c83137\c83137;\cssrgb\c99893\c12008\c0;
}
\margl1440\margr1440\vieww15320\viewh22280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 3/5/20\
AA Data Structures/Algorithms Notes\
4- Dynamic Programming- Tabulation\
\

\f1\b 1. \cf2 Dynamic Programming
\f0\b0 \cf0 \
	- a \cf3 way of solving problems efficiently by dividing a problem into smaller sub problems\cf0 \
	  ? ^ sounds a lot like \ul functional decomposition\ulnone \
\

\f1\b 2. \cf2 Tabulation
\f0\b0 \cf0 \
	- function we\'92re writing is iterative and not recursive\
	- an additional data structure is used (usually an array = \cf2 table\cf0  )\
	Ex.\
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs24 \cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 // fib(0);      // => 0\cf6 \strokec6 \
\cf4 \strokec4 // fib(1);      // => 1\cf6 \strokec6 \
\cf4 \strokec4 // fib(2);      // => 1\cf6 \strokec6 \
\cf4 \strokec4 // fib(6);      // => 8\cf6 \strokec6 \
\cf4 \strokec4 // fib(7);      // => 13\cf6 \strokec6 \
\
\cf4 \strokec4 // VERSION1- Tabulation, but O(n) space\cf6 \strokec6 \
\cf4 \strokec4 // Time Complexity: O(n), n = length of table or input num\cf6 \strokec6 \
\cf4 \strokec4 // Space Complexity: O(n)\cf6 \strokec6 \
\cf4 \strokec4 // fib(6) => 8\cf6 \strokec6 \
\cf7 \strokec7 function\cf6 \strokec6  \cf8 \strokec8 tabulatedFib\cf6 \strokec6 (\cf9 \strokec9 n\cf6 \strokec6 ) \{\
  \cf4 \strokec4 // create blank array of length n\cf6 \strokec6 \
  \cf7 \strokec7 let\cf6 \strokec6  \cf9 \strokec9 table\cf6 \strokec6  = \cf7 \strokec7 new\cf6 \strokec6  \cf10 \strokec10 Array\cf6 \strokec6 (\cf9 \strokec9 n\cf6 \strokec6 );\
\
  \cf4 \strokec4 // seed first 2 elements in array\cf6 \strokec6 \
  \cf9 \strokec9 table\cf6 \strokec6 [\cf11 \strokec11 0\cf6 \strokec6 ] = \cf11 \strokec11 0\cf6 \strokec6 ;\
  \cf9 \strokec9 table\cf6 \strokec6 [\cf11 \strokec11 1\cf6 \strokec6 ] = \cf11 \strokec11 1\cf6 \strokec6 ;\
\
  \cf4 \strokec4 // complete the table by looping through left->right\cf6 \strokec6 \
  \cf12 \strokec12 for\cf6 \strokec6  (\cf7 \strokec7 let\cf6 \strokec6  \cf9 \strokec9 i\cf6 \strokec6  = \cf11 \strokec11 2\cf6 \strokec6 ; \cf9 \strokec9 i\cf6 \strokec6  <= \cf9 \strokec9 n\cf6 \strokec6 ; \cf9 \strokec9 i\cf6 \strokec6 ++) \{\
    \cf9 \strokec9 table\cf6 \strokec6 [\cf9 \strokec9 i\cf6 \strokec6 ] = \cf9 \strokec9 table\cf6 \strokec6 [\cf9 \strokec9 i\cf6 \strokec6  - \cf11 \strokec11 1\cf6 \strokec6 ] + \cf9 \strokec9 table\cf6 \strokec6 [\cf9 \strokec9 i\cf6 \strokec6  - \cf11 \strokec11 2\cf6 \strokec6 ];\
    \cf4 \strokec4 // i = 2: table = [ 0, 1, 1, x, x, x, x ]\cf6 \strokec6 \
    \cf4 \strokec4 // i = 3: table = [ 0, 1, 1, 2, x, x, x ]\cf6 \strokec6 \
    \cf4 \strokec4 // i = 4: table = [ 0, 1, 1, 2, 3, x, x ]\cf6 \strokec6 \
    \cf4 \strokec4 // i = 5: table = [ 0, 1, 1, 2, 3, 5, x ]\cf6 \strokec6 \
    \cf4 \strokec4 // i = 6: table = [ 0, 1, 1, 2, 3, 5, 8 ]\cf6 \strokec6 \
  \}\
\
  \cf12 \strokec12 return\cf6 \strokec6  \cf9 \strokec9 table\cf6 \strokec6 [\cf9 \strokec9 n\cf6 \strokec6 ];\
\}\
\cf4 \strokec4 // console.log(tabulatedFib(6));       //=> 8\cf13 \cb1 \strokec13 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
3. Tabulation Guidelines\
	1. Create table array based off size of input\
	2. Initialize some values in array that represent the most basic subproblem\
	3. Loop through array and fill remaining values\
	4. Final answer is usually last value in array\
\
}