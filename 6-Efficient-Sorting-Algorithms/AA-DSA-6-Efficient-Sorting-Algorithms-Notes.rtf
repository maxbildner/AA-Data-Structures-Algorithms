{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red251\green0\blue7;}
{\*\expandedcolortbl;;\cssrgb\c100000\c12195\c0;}
\margl1440\margr1440\vieww15320\viewh22280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 6/17/20\
AA Data Structures/Algorithms Notes\
6- Efficient Sorting Algorithms \
\

\f1\b 1. \cf2 Merge Sort
\f0\b0 \cf0 \
	- Splits array in half, recursively sorts each half, then merges them\
	- Time Complexity:    O( N log(N) ),  N = input array length\
	log(N) represents the two recursive calls (or the num times it takes for N to reach 1)\
	the first N in N * log(N) represents the while loop in the merge helper function\
	- Space Complexity:  O(N)\
	- When to use: \
		- if you have unlimited memory available\
\
\
}