{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red251\green0\blue7;\red251\green0\blue7;
\red0\green0\blue0;\red0\green0\blue0;\red26\green63\blue255;\red27\green64\blue255;\red27\green64\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;\cssrgb\c100000\c12195\c0;\cssrgb\c100000\c12195\c0;
\cssrgb\c0\c1\c1;\cssrgb\c0\c1\c1;\cssrgb\c13414\c36345\c100000;\cssrgb\c13821\c36821\c100000;\cssrgb\c13821\c36821\c100000;
}
\margl1440\margr1440\vieww19600\viewh24080\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs32 \cf0 7/6/20\
AA Data Structures/Algorithms Notes\
11- 1- Binary Search Trees\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://open.appacademy.io/learn/self-study/data-structures-and-algorithms/binary-search-tree-notes"}}{\fldrslt 
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://open.appacademy.io/learn/self-study/data-structures-and-algorithms/binary-search-tree-notes}}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0 1. \cf3 Binary Tree\cf0 \
	
\f0\b0 - A tree where nodes have at most 2 children nodes
\f2\b \
\
2. \cf4 Binary Search Tree (BST)
\f0\b0 \cf0 \
	- for any node, values in the left subtree must all be < nodes value\
	- values in the right subtree must all be >= nodes value\
	In other words:\
		- left subtree node values < root val\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 		- right subtree node values >= root val\
		- left subtree of root node = binary tree\
		- right subtree of root node = binary tree\
	Note*\
		- empty tree (0 nodes) is a BST\
	Examples of BST:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic bsts.png \width15020 \height4980 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs32 \cf0 \
	- for Example #3 above, traversing tree \cf3 IN ORDER\cf0  results in visiting nodes in this order: \
	1, 5, 7, 10, 16, 16\
\
\
3. Misc Terms\
	\cf3 leaf\cf0  = node that does not have any children nodes\
	\cf3 edges\cf0  = lines/pointers to other nodes\
	path = series of nodes that can be traveled through edges\
\
4. \cf3 Height\cf0  = number of edges between the root and the farthest leaf in a tree\
Example:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic height.png \width10400 \height6380 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs32 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	- tree with 1 node has height = 0
\f2\b \
	
\f0\b0 - empty tree = has height of -1
\f2\b \
\

\f0\b0 5. \cf3 Balanced\cf0  Tree 1\
	- left and right subtrees must differ in height by at most 1\
	- AND left subtree is balanced \
	- AND right subtree is balanced\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic balanced_unbalanced.png \width19020 \height6920 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs32 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	- Tree 1 = Balanced\
	- Tree 2 = NOT balanced
\f2\b \

\f0\b0 	- empty tree = balanced
\f2\b \

\f0\b0 	- \cf3 balanced tree height = \cf4 \ul \ulc9 about\ulnone  \cf3 O(log(N))		\cf0 N = number of nodes in tree\
		- round down to nearest integer
\f2\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 {{\NeXTGraphic Pasted Graphic.png \width31840 \height4560 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f2\b\fs32 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 	h = log(N) = log2 (3)  \
	2^h = 3	h = 1.5  	 = 1\

\f2\b \

\f0\b0 	- worst case Time Complexity \cf3 Search = O(log(N))\cf0  for \ul balanced\ulnone  tree\
		= O(N) for unbalanced tree
\f2\b \
\
\
\
\

\f0\b0 QUESTIONS\
\
}