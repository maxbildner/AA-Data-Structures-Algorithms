{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red251\green0\blue7;\red251\green0\blue7;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;\cssrgb\c100000\c12195\c0;\cssrgb\c100000\c12195\c0;
}
\margl1440\margr1440\vieww15320\viewh22280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs32 \cf0 6/20/20\
AA Data Structures/Algorithms Notes\
8- Linked Lists\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://open.appacademy.io/learn/self-study/data-structures-and-algorithms/linked-list-notes"}}{\fldrslt 
\f1\fs28 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://open.appacademy.io/learn/self-study/data-structures-and-algorithms/linked-list-notes}}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0 1. \cf3 Linked Lists
\f0\b0 \cf0 \
	- \
	- Time Complexity:     O(   ),  N = input array length\
	- Space Complexity:  \
	- When to use: \
		- \
\
2. \cf4 LRU (Least Recently Used) Cache\cf0 \
	- A data structure similar to a hash table \
	- Similarity with Hash Table:  \
		-it has constant read and write capacities get(key), and set(key, val) are O(1) time.\
	- Difference with Hash Table:\
		- instead of re-sizing once it reaches maximum storage capacity, it removes\
		  the least recently used item from the cache, also in O(1) time\
		- least recently used is determined by \'93get\'94 time, not just by creation time\
	- property of LRUCache Object is an object to track LRUCacheItem Objects\
	- another property of LRUCache Object is a doubly linked List to track item ordering\
\
3. Use Cases for LRU Caches\
C\
\
Loop through ALL nodes in linked list\
	let currentNode = this.head;\
	while (\cf4 currentNode\cf0 ) \{\
		currentNode = currentNode.next;\
	 \}\
\
\
Loop through until 2nd to last Node in linked list\
	let currentNode = this.head;\
	while (\cf4 currentNode.next\cf0 ) \{\
		currentNode = currentNode.next;\
	\}\
\

\f2\b \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 QUESTIONS\
- Need to go over advantages/disadvantages of singly/doubly/multiply/circular linked lists
\f2\b \

\f0\b0 - Need to go over hasCycles problem (assuming we don\'92t have access to linked list)
\f2\b \

\f0\b0 \
\
}